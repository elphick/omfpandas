
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/07_visualise_blockmodel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_07_visualise_blockmodel.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_07_visualise_blockmodel.py:


Visualise a BlockModel
======================

It is always useful to visually validate our data. In this example, we will read a block model from an OMF file and
visualise it using PyVista.

.. GENERATED FROM PYTHON SOURCE LINES 8-16

.. code-block:: Python

    import shutil
    from pathlib import Path

    import pandas as pd

    from omfpandas import OMFPandasReader, OMFPandasWriter
    from omfpandas.blockmodels.convert_blockmodel import df_to_regular_bm, blockmodel_to_df








.. GENERATED FROM PYTHON SOURCE LINES 17-20

Instantiate
-----------
Create the object OMFPandas with the path to the OMF file.

.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: Python

    test_omf_path: Path = Path('../assets/copper_deposit.omf')
    omfpr: OMFPandasReader = OMFPandasReader(filepath=test_omf_path)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

We'll inspect the elements in the omf file, and determine what volume element to convert.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: Python


    omfpr.element_types





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'collar': 'PointSet', 'wolfpass_WP_assay': 'LineSet', 'Topography': 'Surface', 'Basement': 'Surface', 'Early Diorite': 'Surface', 'Intermineral diorite': 'Surface', 'Dacite': 'Surface', 'Cover': 'Surface', 'Block Model': 'TensorGridBlockModel'}



.. GENERATED FROM PYTHON SOURCE LINES 29-33

Read
----
We can see by inspection that we have a TensorGridBlockModel in the omf file called *Block Model*, so we will
convert that to a Pandas DataFrame, simply for the purposes of showing the first few records.

.. GENERATED FROM PYTHON SOURCE LINES 33-38

.. code-block:: Python


    blocks: pd.DataFrame = omfpr.read_blockmodel(blockmodel_name='Block Model', attributes=None)
    print(f"DataFrame shape: {blocks.shape}")
    blocks.head()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    DataFrame shape: (1689600, 1)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th>CU_pct</th>
        </tr>
        <tr>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>dx</th>
          <th>dy</th>
          <th>dz</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="5" valign="top">5.0</th>
          <th rowspan="5" valign="top">5.0</th>
          <th>5.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <td>0.002696</td>
        </tr>
        <tr>
          <th>15.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <td>0.002720</td>
        </tr>
        <tr>
          <th>25.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <td>0.002744</td>
        </tr>
        <tr>
          <th>35.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <td>0.002768</td>
        </tr>
        <tr>
          <th>45.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <th>10.0</th>
          <td>0.002793</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 39-40

We read the block model and convert it to an OMFBlockModel object

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python


    from omfpandas.blockmodel import OMFBlockModel

    bm: OMFBlockModel = OMFBlockModel(omfpr.get_element_by_name('Block Model'))








.. GENERATED FROM PYTHON SOURCE LINES 46-49

Visualise
---------
We can visualise the block model using PyVista.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python


    p = bm.plot(scalar='CU_pct')
    p.show()




.. image-sg:: /auto_examples/images/sphx_glr_07_visualise_blockmodel_001.png
   :alt: 07 visualise blockmodel
   :srcset: /auto_examples/images/sphx_glr_07_visualise_blockmodel_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-55

Create a regular model

.. GENERATED FROM PYTHON SOURCE LINES 55-69

.. code-block:: Python


    # ----------------------
    # We can only do this since this particular tensor model has consistent block sizes.
    #
    # Make a copy of the file first.

    demo_omf_filepath: Path = shutil.copy2(test_omf_path, test_omf_path.with_suffix('.modified.omf'))

    regular_bm = df_to_regular_bm(blockmodel_name='Regular Block Model', df=blocks.droplevel(level=['dx', 'dy', 'dz']))
    regular_blocks: pd.DataFrame = blockmodel_to_df(regular_bm)

    omfpw: OMFPandasWriter = OMFPandasWriter(filepath=demo_omf_filepath)
    omfpw.create_blockmodel(blocks=regular_blocks, blockmodel_name='Regular Block Model')








.. GENERATED FROM PYTHON SOURCE LINES 70-72

Visualise Regular Model
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 72-76

.. code-block:: Python


    bm_regular: OMFBlockModel = OMFBlockModel(omfpw.get_element_by_name('Regular Block Model'))
    p = bm_regular.plot(scalar='CU_pct')
    p.show()



.. image-sg:: /auto_examples/images/sphx_glr_07_visualise_blockmodel_002.png
   :alt: 07 visualise blockmodel
   :srcset: /auto_examples/images/sphx_glr_07_visualise_blockmodel_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.230 seconds)


.. _sphx_glr_download_auto_examples_07_visualise_blockmodel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 07_visualise_blockmodel.ipynb <07_visualise_blockmodel.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 07_visualise_blockmodel.py <07_visualise_blockmodel.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
